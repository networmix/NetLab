"""Cross-scenario plots for iteration operation metrics.

This script reads per-scenario ``iterops_summary.csv`` files generated by
analysis.py and produces a multi-panel figure comparing median per-iteration
operation intensity across scenarios:

- SPF calls per iteration
- Flows created per iteration
- Re-optimization calls per iteration

The figure uses bar charts for ease of comparison across scenarios.
"""

from __future__ import annotations

from pathlib import Path
from typing import Iterable, List, Optional

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

plt.rcParams["figure.dpi"] = 300
plt.rcParams["savefig.dpi"] = 300
plt.rcParams["savefig.bbox"] = "tight"
plt.rcParams["axes.titlesize"] = 13
plt.rcParams["axes.labelsize"] = 11
plt.rcParams["legend.fontsize"] = 10
plt.rcParams["xtick.labelsize"] = 9
plt.rcParams["ytick.labelsize"] = 9


def _load_iterops_median_per_iter(scen_dir: Path) -> Optional[pd.Series]:
    p = scen_dir / "iterops_summary.csv"
    if not p.exists():
        return None
    try:
        df = pd.read_csv(p)
        cols = [
            "spf_calls_total_per_iter",
            "flows_created_total_per_iter",
            "reopt_calls_total_per_iter",
        ]
        out = {}
        for c in cols:
            if c in df.columns:
                series = pd.to_numeric(df[c], errors="coerce")
                vals = np.asarray(series.values, dtype=float)
                out[c] = float(np.nanmedian(vals))
            else:
                out[c] = float("nan")
        return pd.Series(out)
    except Exception:
        return None


def plot_cross_seed_iterops(
    analysis_root: Path,
    only: Optional[Iterable[str]] = None,
    save_to: Optional[Path] = None,
) -> Optional[Path]:
    analysis_root = analysis_root.resolve()
    scen_dirs = [
        p
        for p in sorted(analysis_root.iterdir())
        if p.is_dir() and not p.name.startswith("_")
    ]
    if only:
        only_set = set(only)
        scen_dirs = [p for p in scen_dirs if p.name in only_set]
    if not scen_dirs:
        return None

    rows: List[pd.Series] = []
    index: List[str] = []
    for sd in scen_dirs:
        s = _load_iterops_median_per_iter(sd)
        if s is not None:
            rows.append(s)
            index.append(sd.name)
    if not rows:
        return None
    data = pd.DataFrame(rows, index=index)
    # Rename columns for readability
    data = data.rename(
        columns={
            "spf_calls_total_per_iter": "SPF/iter",
            "flows_created_total_per_iter": "Flows created/iter",
            "reopt_calls_total_per_iter": "Reopt/iter",
        }
    )

    sns.set_theme(style="whitegrid")
    fig, axes = plt.subplots(1, 3, figsize=(14.0, 4.5), sharex=False)
    metrics = ["SPF/iter", "Flows created/iter", "Reopt/iter"]
    for ax, col in zip(axes, metrics, strict=False):
        if col not in data.columns:
            ax.axis("off")
            continue
        plot_df = data[[col]].copy().reset_index().rename(columns={"index": "scenario"})
        plot_df = plot_df.sort_values(by=col, ascending=False)
        sns.barplot(data=plot_df, x="scenario", y=col, ax=ax)
        ax.set_title(col)
        ax.set_xlabel("scenario")
        ax.set_ylabel(col)
        ax.grid(True, linestyle=":", linewidth=0.5, axis="y")
        for label in ax.get_xticklabels():
            label.set_rotation(20)
            label.set_ha("right")

    fig.suptitle("Iteration operation intensity (median per iteration across seeds)")
    fig.tight_layout()

    if save_to is not None:
        save_to = save_to.resolve()
        save_to.parent.mkdir(parents=True, exist_ok=True)
        fig.savefig(save_to)
        plt.close(fig)
        return save_to
    plt.show()
    return None


def main() -> None:
    import argparse

    ap = argparse.ArgumentParser(
        description="Plot cross-scenario iteration operation metrics"
    )
    ap.add_argument(
        "analysis_root",
        type=str,
        help="Root with per-scenario metrics (e.g., scenarios_metrics)",
    )
    ap.add_argument(
        "--only", type=str, default="", help="Comma-separated scenarios to include"
    )
    ap.add_argument(
        "--save", type=str, default="", help="Output figure path (PNG/JPG/SVG)"
    )
    args = ap.parse_args()

    root = Path(args.analysis_root)
    only: Optional[List[str]] = None
    if args.only.strip():
        only = [s.strip() for s in args.only.split(",") if s.strip()]
    out: Optional[Path] = None
    if args.save.strip():
        out = Path(args.save)

    res = plot_cross_seed_iterops(root, only=only, save_to=out)
    if res is not None:
        print(f"Saved cross-scenario iterops figure â†’ {res}")
    else:
        print("No iterops data to plot.")


if __name__ == "__main__":
    main()
